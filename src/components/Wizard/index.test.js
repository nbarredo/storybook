/* eslint-disable testing-library/no-container */
/* eslint-disable testing-library/no-node-access */
import { render, screen } from "@testing-library/react";
import React from "react";
import { Wizard } from ".";

const setOpen = jest.fn();

// Generated by CodiumAI

describe("Wizard", () => {
  // Renders ComposedModal with headerTitle and children
  test("should render ComposedModal with headerTitle and children when open is true", () => {
    const { getByText } = render(
      <Wizard
        headerTitle="Test Header"
        state="test-state"
        open={true}
        setOpen={jest.fn()}
      >
        <div>Test Content</div>
      </Wizard>
    );

    expect(screen.getByText("Test Header")).toBeInTheDocument();
    expect(screen.getByText("Test Content")).toBeInTheDocument();
  });

  // Applies CSS transition on open
  test("should apply CSS transition on open", () => {
    render(
      <Wizard
        headerTitle="Test Header"
        state="test-state"
        id={"test"}
        open={true}
        setOpen={jest.fn()}
      >
        <div>Test Content</div>
      </Wizard>
    );

    expect(screen.getByTestId("test")).toHaveClass("wizard-enter");
  });

  // Does not render ComposedModal if open is false
  test("should not render ComposedModal if open is false", () => {
    render(
      <Wizard
        headerTitle="Test Header"
        id={"test"}
        state="test-state"
        open={false}
        setOpen={jest.fn()}
      >
        <div>Test Content</div>
      </Wizard>
    );

    const element = screen.getByTestId("test");
    expect(element).not.toHaveClass("is-visible");
  });

  // Does not render ModalHeader if headerTitle is not provided
  test("should not render ModalHeader if headerTitle is not provided", () => {
    render(
      <Wizard state="test-state" open={true} setOpen={jest.fn()}>
        <div>Test Content</div>
      </Wizard>
    );
    const element = screen.queryByText("Test Header");
    expect(element).not.toBeInTheDocument();
  });
});
