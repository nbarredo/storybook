pool:
  #vmImage: ubuntu-latest
  name: $(agent_name)

trigger:
  branches:
    include:
      - master
      - feature/*
      - users/*
  paths:
    exclude:
      - README.md

variables:
  - group: devops_config
  - group: nuget-Eversource.Storybook
  - name: preReleaseFeedView
    value: pre-release
  - name: releaseFeedView
    value: release
  - name: feedId
    value: 96cdb231-7ea1-40a0-b861-b71056a9a44e
  - name: packageName
    value: "@eversource/storybook"
  - name: packageVersion
    value: $(Build.BuildNumber)
  - name: nonprodpackagePromote
    value: "Prerelease"
  - name: prodpackagePromote
    value: "Release"
name: "$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:-r)"

jobs:
  - job: "Feature_Topic_Prerelease"
    condition: and(succeeded(), or( startsWith(variables['Build.SourceBranch'], 'refs/heads/users/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')))

    steps:
      - checkout: self
        fetchDepth: 1

      - script: |
          git config user.email "pipeline@eversource.com" 
          git config user.name "Azure DevOps"

      - task: Npm@1
        displayName: "Set NPM package version"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: "custom"
          workingDir: "$(System.DefaultWorkingDirectory)"
          customCommand: "version $(Build.BuildNumber) --force"

      - task: NodeTool@0
        inputs:
          versionSpec: "20.10.0" # Specify the Node.js version you want
          checkLatest: true

      - task: Npm@1
        displayName: NPM Install
        inputs:
          command: "ci"
          workingDir: "$(System.DefaultWorkingDirectory)"

      - task: Npm@1
        displayName: NPM Run Unit Tests with code coverage
        enabled: false
        inputs:
          command: "custom"
          workingDir: "$(System.DefaultWorkingDirectory)"
          customCommand: "run test:ci"

      - task: Npm@1
        displayName: NPM Build
        inputs:
          command: "custom"
          workingDir: "$(System.DefaultWorkingDirectory)"
          customCommand: "run build"

      - task: PublishTestResults@2
        enabled: false #as requested by Leo
        displayName: "Publish Unit Test Results"
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "$(System.DefaultWorkingDirectory)/**/junit.xml"
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: "React App Test"

      - task: PublishCodeCoverageResults@1
        enabled: false #as requested by Leo
        displayName: "Publish code coverage"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage/cobertura-coverage.xml"
          reportDirectory: "$(System.DefaultWorkingDirectory)/coverage"
          failIfCoverageEmpty: false

      - task: PowerShell@2
        enabled: false
        inputs:
          targetType: "inline"
          script: |
            $buildNumber = $Env:BUILD_BUILDNUMBER
            $revision = $buildNumber.Substring($buildNumber.LastIndexOf('_') + 1)
            $srcbranch = "$(Build.SourceBranchName)" -replace '[^a-zA-Z0-9]'
            $newbranch = -join($srcbranch,".",$revision)
            echo "##vso[task.setvariable variable=newSourceBranch;isOutput=true]$newbranch"
        name: branchsetter

      - task: PowerShell@2
        enabled: false
        name: print
        inputs:
          targetType: "inline"
          script: write-host "$(branchsetter.newSourceBranch)"

      # Promotion to prerelease of the feature/* commit
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifact
        #condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)/build
          artifactName: build

      - task: npmAuthenticate@0
        enabled: true
        inputs:
          workingFile: "$(System.DefaultWorkingDirectory)/.npmrc"

      - task: Npm@1
        displayName: Publish NPM Pkg to Artifact feed
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: "custom"
          workingDir: $(System.DefaultWorkingDirectory)/build
          customCommand: "run publish:ci"
          customRegistry: "useFeed"
          customFeed: $(feedId)

      - task: PowerShell@2
        displayName: "Promote package to prerelease view"
        enabled: true
        inputs:
          targetType: "inline"
          script: |
            # Write your PowerShell commands here.
            $base64AuthInfo = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('npm:$(System.AccessToken)'))
            $uri = "https://pkgs.dev.azure.com/Eversource-Energy/ms-benchmark/_apis/packaging/feeds/$(feedId)/npm/$(packageName)/versions/$(packageVersion)?api-version=7.1-preview.1"
            $body = "{'views': {'op': 'add', 'path': '/views/-', 'value':'$(nonprodpackagePromote)'}}"
            Invoke-WebRequest -Uri $uri -Headers @{Authorization= "Basic $base64AuthInfo"} -Method Patch -Body $body -ContentType "application/json"

  - job: "Master_Release"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    steps:
      - checkout: self
        fetchDepth: 1

      - script: |
          git config user.email "pipeline@eversource.com" 
          git config user.name "Azure DevOps"

      - task: Npm@1
        displayName: "Set NPM package version"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: "custom"
          workingDir: "$(System.DefaultWorkingDirectory)"
          customCommand: "version $(Build.BuildNumber) --force"

      - task: NodeTool@0
        inputs:
          versionSpec: "20.10.0" # Specify the Node.js version you want
          checkLatest: true
      - task: Npm@1
        displayName: NPM Install
        inputs:
          command: "ci"
          workingDir: "$(System.DefaultWorkingDirectory)"

      - task: Npm@1
        displayName: NPM Build
        inputs:
          command: "custom"
          workingDir: "$(System.DefaultWorkingDirectory)"
          customCommand: "run build"

      - task: Npm@1
        enabled: true
        displayName: NPM Run Unit Tests with code coverage
        inputs:
          command: "custom"
          workingDir: "$(System.DefaultWorkingDirectory)"
          customCommand: "run test:ci"

      - task: PublishTestResults@2
        enabled: true
        displayName: "Publish Unit Test Results"
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "$(System.DefaultWorkingDirectory)/**/junit.xml"
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: "React App Test"

      - task: PublishCodeCoverageResults@1
        enabled: true
        displayName: "Publish code coverage"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage/cobertura-coverage.xml"
          reportDirectory: "$(System.DefaultWorkingDirectory)/coverage"
          failIfCoverageEmpty: false

      # Promotion to release of the master commit

      - task: PublishPipelineArtifact@1
        displayName: Publish Artifact
        #condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)/build
          artifactName: build

      - task: npmAuthenticate@0
        enabled: true
        inputs:
          workingFile: "$(System.DefaultWorkingDirectory)/.npmrc"

      - task: Npm@1
        displayName: Publish NPM Pkg to Artifact feed
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: "custom"
          workingDir: $(System.DefaultWorkingDirectory)/build
          customCommand: "run publish:ci"
          customRegistry: "useFeed"
          customFeed: $(feedId)

      - task: PowerShell@2
        displayName: "Promote package to release view"
        enabled: true
        inputs:
          targetType: "inline"
          script: |
            # Write your PowerShell commands here.
            $base64AuthInfo = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('npm:$(System.AccessToken)'))
            $uri = "https://pkgs.dev.azure.com/Eversource-Energy/ms-benchmark/_apis/packaging/feeds/$(feedId)/npm/$(packageName)/versions/$(packageVersion)?api-version=7.1-preview.1"
            $body = "{'views': {'op': 'add', 'path': '/views/-', 'value':'$(prodpackagePromote)'}}"
            Invoke-WebRequest -Uri $uri -Headers @{Authorization= "Basic $base64AuthInfo"} -Method Patch -Body $body -ContentType "application/json"
