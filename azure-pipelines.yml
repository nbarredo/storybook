pool:
  #vmImage: ubuntu-latest
  name: $(agent_name)

trigger:
  branches:
    include:
      - master
      - feature/*
      - users/*
  paths:
    exclude:
      - README.md

variables:
- group: devops_config
- group: nuget-Eversource.Storybook
- name: feedId
  value: '96cdb231-7ea1-40a0-b861-b71056a9a44e'
- name: packageName
  value: '@eversource/storybook'
- name: packageVersion
  value: $(Build.BuildNumber)
- name: nonprodpackagePromote
  value: 'Prerelease'
- name: prodpackagePromote
  value: 'Release'
  
name: '$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:-r)' 
stages:
- stage: Build
  jobs:     
  -   job: 'Feature_Branch_Prerelease'
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/'))
      
      steps:
      - checkout: self
        fetchDepth: 1
        clean: true

      - script: |
            git config user.email "pipeline@eversource.com" 
            git config user.name "Azure DevOps"
      
      - script: |
           npm cache clean --force
        displayName: 'Clean npm cache'
          
      - task: Npm@1
        displayName: 'Set NPM package version'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
            command: 'custom'
            workingDir: '$(System.DefaultWorkingDirectory)'
            customCommand: 'version $(packageVersion) --force' 

      - task: NodeTool@0
        inputs:
          versionSpec: '20.10.0'  # Specify the Node.js version you want
          checkLatest: true
        
      - task: Npm@1
        displayName: NPM Install
        inputs:
            command: 'install'
            workingDir: '$(System.DefaultWorkingDirectory)'
  
      - task: Npm@1
        displayName: NPM Run Unit Tests with code coverage
        enabled: false #as requested by Leo
        inputs:
            command: 'custom'
            workingDir: '$(System.DefaultWorkingDirectory)'
            customCommand: 'run test:ci'

      - task: Npm@1
        displayName: NPM build package
        inputs:
            command: 'custom'
            workingDir: '$(System.DefaultWorkingDirectory)'
            customCommand: 'run build-npm-package'

      - task: Npm@1
        displayName: NPM build storybook
        inputs:
            command: 'custom'
            workingDir: '$(System.DefaultWorkingDirectory)'
            customCommand: 'run build-storybook'

      - task: PublishTestResults@2
        enabled: false #as requested by Leo
        displayName: 'Publish Unit Test Results'
        condition: succeededOrFailed()
        inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '$(System.DefaultWorkingDirectory)/**/junit.xml'
            mergeTestResults: true
            failTaskOnFailedTests: true
            testRunTitle: 'React App Test'

      - task: PublishCodeCoverageResults@1
        enabled: false #as requested by Leo
        displayName: "Publish code coverage"
        inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage/cobertura-coverage.xml"
            reportDirectory: "$(System.DefaultWorkingDirectory)/coverage"
            failIfCoverageEmpty: false
            
      - task: PublishPipelineArtifact@1
        displayName: Publish build package Artifact
        condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)/dist/
          artifactName: npmbuild
        
      - task: PublishPipelineArtifact@1
        displayName: Publish build storybook Artifact
        condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)/storybook-static/
          artifactName: npmstorybook

      - task: npmAuthenticate@0
        enabled: true  
        inputs:
          workingFile: '$(System.DefaultWorkingDirectory)/.npmrc'
          
      - task: Npm@1
        displayName: Publish NPM Pkg to Artifact feed
        enabled: true
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: 'custom'
          workingDir: $(System.DefaultWorkingDirectory)/dist/
          customCommand: 'run publish:ci'
          customRegistry: 'useFeed'
          customFeed: '920b2c70-c890-4c92-a66a-c53cd39cf05b/96cdb231-7ea1-40a0-b861-b71056a9a44e'
    
      # Promotion to prerelease of the feature/* commit 
      - task: PowerShell@2
        displayName: "Promote package to prerelease view"
        enabled: true
        inputs:
          targetType: 'inline'
          script: |
             # Write your PowerShell commands here.
             $base64AuthInfo = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('npm:$(System.AccessToken)'))
             $uri = "https://pkgs.dev.azure.com/Eversource-Energy/ms-benchmark/_apis/packaging/feeds/$(feedId)/npm/$(packageName)/versions/$(packageVersion)?api-version=7.1-preview.1"
             $body = "{'views': {'op': 'add', 'path': '/views/-', 'value':'$(nonprodpackagePromote)'}}"
             Invoke-RestMethod -UseBasicParsing -Uri $uri -Headers @{Authorization= "Basic $base64AuthInfo"} -Method Patch -Body $body -ContentType "application/json"
      
      - task: PowerShell@2
        displayName: 'Clean up $(System.DefaultWorkingDirectory)'  
        enabled: false
        inputs:
          targetType: 'inline'
          script: |
           # Write your PowerShell commands here.
           Start-Sleep -Seconds 120
           Get-ChildItem $(System.DefaultWorkingDirectory) -Recurse | Remove-Item -Force -Confirm:$false 

      - task: DeleteFiles@1
        displayName: 'Clean up $(System.DefaultWorkingDirectory)'  
        enabled: true
        inputs:
          sourceFolder: '$(System.DefaultWorkingDirectory)'
          contents: '*'
          RemoveSourceFolder: true 
          #RemoveDotFiles: true
      
      - task: DeleteFiles@1
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)'
          Contents: '**/.*/**'
          RemoveSourceFolder: false

  - job: 'Master_Release'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
    steps:
    - checkout: self
      fetchDepth: 1

    - script: |
        git config user.email "pipeline@eversource.com" 
        git config user.name "Azure DevOps"

    - task: Npm@1
      displayName: 'Set NPM package version'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'custom'
        workingDir: '$(System.DefaultWorkingDirectory)'
        customCommand: 'version $(packageVersion) --force' 
  
    - task: NodeTool@0
      inputs:
        versionSpec: '20.10.0'  # Specify the Node.js version you want
        checkLatest: true

    - task: Npm@1
      displayName: NPM Install
      inputs:
        command: 'ci'
        workingDir: '$(System.DefaultWorkingDirectory)'

    - task: Npm@1
      enabled: false #as requested by Leo
      displayName: NPM Run Unit Tests with code coverage
      inputs:
        command: 'custom'
        workingDir: '$(System.DefaultWorkingDirectory)'
        customCommand: 'run test:ci'

    - task: Npm@1
      displayName: NPM build package
      inputs:
          command: 'custom'
          workingDir: '$(System.DefaultWorkingDirectory)'
          customCommand: 'run build-npm-package'

    - task: Npm@1
      displayName: NPM build storybook
      inputs:
          command: 'custom'
          workingDir: '$(System.DefaultWorkingDirectory)'
          customCommand: 'run build-storybook'

    - task: PublishTestResults@2
      enabled: false #as requested by Leo
      displayName: 'Publish Unit Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/**/junit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'React App Test'

    - task: PublishCodeCoverageResults@1
      enabled: false #as requested by Leo
      displayName: "Publish code coverage"
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage/cobertura-coverage.xml"
        reportDirectory: "$(System.DefaultWorkingDirectory)/coverage"
        failIfCoverageEmpty: false
  
    - task: PublishPipelineArtifact@1
      displayName: Publish build package Artifact
      condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/dist/
        artifactName: npmbuild
        
    - task: PublishPipelineArtifact@1
      displayName: Publish build storybook Artifact
      condition: and(succeeded(),ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/storybook-static/
        artifactName: npmstorybook
  
    - task: npmAuthenticate@0
      enabled: true  
      inputs:
        workingFile: '$(System.DefaultWorkingDirectory)/.npmrc'

    - task: Npm@1
      displayName: Publish NPM Pkg to Artifact feed
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'custom'
        workingDir: $(System.DefaultWorkingDirectory)/dist/
        customCommand: 'run publish:ci'
        customRegistry: 'useFeed'
        customFeed: $(feedId)

    # Promotion to release of the master commit  
    - task: PowerShell@2
      displayName: "Promote package to release view"
      enabled: true
      inputs:
        targetType: 'inline'
        script: |
            # Write your PowerShell commands here.
            $base64AuthInfo = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('npm:$(System.AccessToken)'))
            $uri = "https://pkgs.dev.azure.com/Eversource-Energy/ms-benchmark/_apis/packaging/feeds/$(feedId)/npm/$(packageName)/versions/$(packageVersion)?api-version=7.1-preview.1"
            $body = "{'views': {'op': 'add', 'path': '/views/-', 'value':'$(prodpackagePromote)'}}"
            Invoke-RestMethod -UseBasicParsing -Uri $uri -Headers @{Authorization= "Basic $base64AuthInfo"} -Method Patch -Body $body -ContentType "application/json"

    - task: PowerShell@2
      displayName: 'Clean up $(System.DefaultWorkingDirectory)'  
      enabled: false
      inputs:
        targetType: 'inline'
        script: |
           # Write your PowerShell commands here.
           Start-Sleep -Seconds 120
           Get-ChildItem $(System.DefaultWorkingDirectory) -Recurse | Remove-Item -Force -Confirm:$false 

    - task: DeleteFiles@1
      displayName: 'Clean up $(System.DefaultWorkingDirectory)'  
      enabled: true
      inputs:
        sourceFolder: '$(System.DefaultWorkingDirectory)'
        contents: '*'
        RemoveSourceFolder: true
        #RemoveDotFiles: true

- stage: DeploytoNonProdNetstorage
  displayName: NonProd Netstorage
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/'))
  jobs:
  - deployment: UploadAkamaiArtifact_Review
    displayName: Upload Akamai Artifact to Review folder
    environment: 'Storybook-nonprod'
    
    pool:
        vmImage: ubuntu-latest        
    strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadPipelineArtifact@2
                enabled: true
                displayName: Download Artifact
                inputs:
                   targetPath: $(System.DefaultWorkingDirectory)/storybook-static/
                   artifactName: npmstorybook
                   
              - task: FtpUpload@2
                displayName: Publish NonProd Versioned for review
                enabled: true
                inputs:
                   credentialsOption: 'serviceEndpoint'
                   serverEndpoint: 'cdn-nonprod-sb'
                   rootDirectory: '$(System.DefaultWorkingDirectory)/storybook-static/'
                   filePatterns: |
                       **
                   remoteDirectory: '/597761/nonprod/storybook/review/$(packageVersion)'
                   clean: false
                   cleanContents: false
                   preservePaths: true
                   trustSSL: false
                   
              - task: FtpUpload@2
                displayName: Publish NonProd to Latest for review
                enabled: false
                # condition: and(succeeded(), eq('${{ parameters.isDesignReviewRequired }}', true))
                inputs:
                   credentialsOption: 'serviceEndpoint'
                   serverEndpoint: 'cdn-nonprod-sb'
                   rootDirectory: '$(System.DefaultWorkingDirectory)/storybook-static/'
                   filePatterns: |
                       **
                   remoteDirectory: '/597761/nonprod/storybook/latest'
                   clean: false
                   cleanContents: false
                   preservePaths: true
                   trustSSL: true
      
- stage: DeploytoProdNetstorage
  displayName: Prod Netstorage
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: UploadAkamaiArtifact_Prod
    displayName: Upload Akamai Artifact to Prod Net storage
    environment: 'Storybook-prod'
    
    pool:
        vmImage: ubuntu-latest        
    strategy:
          runOnce:
            deploy:
              steps:      
              - task: DownloadPipelineArtifact@2
                enabled: true
                displayName: Download Artifact
                inputs:
                   targetPath: $(System.DefaultWorkingDirectory)/storybook-static/
                   artifactName: npmstorybook

              - task: FtpUpload@2
                displayName: Publish Prod Versioned
                inputs:
                    credentialsOption: 'serviceEndpoint'
                    serverEndpoint: 'cdn-prod-sb'
                    rootDirectory: '$(System.DefaultWorkingDirectory)/storybook-static/'
                    filePatterns: |
                        **
                    remoteDirectory: '/597761/prod/storybook/$(packageVersion)'
                    clean: false
                    cleanContents: false
                    preservePaths: true
                    trustSSL: false

              - task: FtpUpload@2
                displayName: Publish Prod to Latest folder
                inputs:
                    credentialsOption: 'serviceEndpoint'
                    serverEndpoint: 'cdn-prod-sb'
                    rootDirectory: '$(System.DefaultWorkingDirectory)/storybook-static/'
                    filePatterns: |
                        **
                    remoteDirectory: '/597761/prod/storybook/latest'
                    clean: true
                    cleanContents: false
                    preservePaths: true
                    trustSSL: false
              
     